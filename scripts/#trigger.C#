/********************************
Author : Aravindhan V.
*********************************/
#include <TFile.h>
#include <TChain.h>
#include <TCanvas.h>
#include <iostream>
#include <TH1D.h>
#include <TROOT.h>
#include <TSystem.h>

using namespace std;
void trigger(Int_t run = 1, Int_t isData = 1, Int_t mcType = 0)
/*
run = 1/2 for Run 1/2 data/MC. Run 1 = 2011,2012 for both data and MC. Run 2 = 2015,2016 for MC, 2015,2016,2017,2018 for data
isData = 1 for data, 0 for MC
mcType = 0 when running over data. When running over MC, mcType = 1 for JpsiLambda, 2 for JpsiSigma, 3 for JpsiXi.
*/
/*
Have a separate script that does the collation of files. trigger.C shouldn't be handling this. It should only be applying the cut.
*/
{
    TFile *fileout(0);
    TTree *treeout(0), *mytree(0);
    char *triggerCut(0);

    Int_t entries_init(0), entries_final(0), entries_gen(0);
    Bool_t hlt1DiMuonHighMass(0), hlt1TrackMuon(0), hlt1TrackAllL0(0), hlt2DiMuonDetached(0);

    Float_t eff_excl, eff_excl_err,eff_incl,eff_incl_err;
    if(isData == 1)
    {
        TChain *h1, *h2;
        TH1D *lumihist, *lumierrhist;
        Double_t lumi, lumierr;

        h1 = new TChain("Lb2JpsiLTree/MyTuple");
        h2 = new TChain("GetIntegratedLuminosity/LumiTuple");
        if(run==1)
        {
            gROOT->ProcessLine(".> /data1/avenkate/JpsiLambda_RESTART/logs/data/JpsiLambda/run1/trigger_log.txt");
            cout<<"Processing DATA"<<endl;
            cout<<"Adding Run 1 ROOT files to TChain. Sit tight"<<endl;
            //Find a way to have these loops automatically know how many folders it is looping over, so that the user doesn't have to supply the max number
            for(Int_t i=0; i<=253;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2011_MagDown/887_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2011_MagDown/887_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=20;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2011_MagDown/981_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2011_MagDown/981_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=213;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2011_MagUp/888_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2011_MagUp/888_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=27;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2011_MagUp/982_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2011_MagUp/982_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=342;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2012_MagDown/889_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2012_MagDown/889_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=16;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2012_MagDown/952_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2012_MagDown/952_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=371;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2012_MagUp/890_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2012_MagUp/890_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=45;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2012_MagUp/983_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2012_MagUp/983_%d/jpsilambda.root",i),-1);
            }
            fileout = new TFile("/data1/avenkate/JpsiLambda_RESTART/rootFiles/dataFiles/JpsiLambda/run1/jpsilambda_triggered.root","RECREATE");
        }
        else if(run == 2)
        {
            gROOT->ProcessLine(".> /data1/avenkate/JpsiLambda_RESTART/logs/data/JpsiLambda/run2/trigger_log.txt");
            cout<<"Processing DATA"<<endl;
            cout<<"Adding Run 2 ROOT files to TChain. Sit tight"<<endl;
            //Find a way to have these loops automatically know how many folders it is looping over, so that the user doesn't have to supply the max number
            for(Int_t i=0; i<=185;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1042_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1042_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=4;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1138_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1138_%d/jpsilambda.root",i),-1);

                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1139_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1139_%d/jpsilambda.root",i),-1);

                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1140_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1140_%d/jpsilambda.root",i),-1);

                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1141_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagDown/1141_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=116;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1043_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1043_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=4;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1142_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1142_%d/jpsilambda.root",i),-1);

                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1143_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1143_%d/jpsilambda.root",i),-1);

                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1144_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1144_%d/jpsilambda.root",i),-1);

                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1145_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2015_MagUp/1145_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=637;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2016_MagDown/1044_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2016_MagDown/1044_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=153;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2016_MagDown/1149_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2016_MagDown/1149_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=614;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2016_MagUp/1045_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2016_MagUp/1045_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=169;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2016_MagUp/1150_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2016_MagUp/1150_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=566;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2017_MagDown/1046_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2017_MagDown/1046_%d/jpsilambda.root",i),-1);
            }
            for(Int_t i=0; i<=568;i++)
            {
                h1->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2017_MagUp/1047_%d/jpsilambda.root",i),-1);
                h2->Add(TString::Format("/data1/avenkate/JpsiLambda/massdump/data/2017_MagUp/1047_%d/jpsilambda.root",i),-1);
            }
            fileout = new TFile("/data1/avenkate/JpsiLambda_RESTART/rootFiles/dataFiles/JpsiLambda/run2/jpsilambda_triggered.root","RECREATE");
        }
        cout<<"DONE ATTACHING ROOT FILES"<<endl;

        entries_init = h1->GetEntries();

        h2->Draw("IntegratedLuminosity>>lumihist","","goff");
        h2->Draw("IntegratedLuminosityErr>>lumierrhist","","goff");

        lumihist = (TH1D*)gDirectory->Get("lumihist");
        lumierrhist = (TH1D*)gDirectory->Get("lumierrhist");

        lumi = (lumihist->GetMean())*(lumihist->GetEntries());
        lumierr = (lumierrhist->GetMean())*(lumierrhist->GetEntries());

        cout<<"Processing "<<lumi<<" +/- "<<lumierr<< "luminosity"<<endl;

        mytree = (TTree*)h1;
    }

    if(isData == 0)
    {
        TFile *filein(0);
        TTree *treein(0), *treein_gen(0);

        if(mcType == 1)
        {
            if(run==1)
            {
                gROOT->ProcessLine(".> /data1/avenkate/JpsiLambda_RESTART/logs/mc/JpsiLambda/run1/trigger_log.txt");
                cout<<"PROCESSING MC for Run 1 Jpsi Lambda"<<endl;
                filein = TFile::Open("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiLambda/run1/jpsilambda.root");
                treein_gen = (TTree*)filein->Get("MCTuple/MCDecayTree");
                treein = (TTree*)filein->Get("Lb2JpsiLTree/MyTuple");
                fileout = new TFile("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiLambda/run1/jpsilambda_triggered.root","RECREATE");
            }
            if(run==2)
            {
                gROOT->ProcessLine(".> /data1/avenkate/JpsiLambda_RESTART/logs/mc/JpsiLambda/run2/trigger_log.txt");
                cout<<"PROCESSING MC for Run 2 Jpsi Lambda"<<endl;
                filein = TFile::Open("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiLambda/run2/jpsilambda.root");
                treein_gen = (TTree*)filein->Get("MCTuple/MCDecayTree");
                treein = (TTree*)filein->Get("Lb2JpsiLTree/MyTuple");
                fileout = new TFile("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiLambda/run2/jpsilambda_triggered.root","RECREATE");
            }
        }
        if(mcType == 2)
        {
            if(run==1)
            {
                gROOT->ProcessLine(".> /data1/avenkate/JpsiLambda_RESTART/logs/mc/JpsiSigma/run1/trigger_log.txt");
                cout<<"PROCESSING MC for Run 1 JpsiSigma"<<endl;
                filein = TFile::Open("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiSigma/run1/jpsisigma.root");
                treein_gen = (TTree*)filein->Get("MCTuple/MCDecayTree");
                treein = (TTree*)filein->Get("Lb2JpsiLTree/MyTuple");
                fileout = new TFile("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiSigma/run1/jpsisigma_triggered.root","RECREATE");
            }
            if(run==2)
            {
                gROOT->ProcessLine(".> /data1/avenkate/JpsiLambda_RESTART/logs/mc/JpsiSigma/run2/trigger_log.txt");
                cout<<"PROCESSING MC for Run 2 JpsiSigma"<<endl;
                filein = TFile::Open("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiSigma/run2/jpsisigma.root");
                treein_gen = (TTree*)filein->Get("MCTuple/MCDecayTree");
                treein = (TTree*)filein->Get("Lb2JpsiLTree/MyTuple");
                fileout = new TFile("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiSigma/run2/jpsisigma_triggered.root","RECREATE");
            }
        }
        if(mcType == 3)
        {
            if(run==1)
            {
                gROOT->ProcessLine(".> /data1/avenkate/JpsiLambda_RESTART/logs/mc/JpsiXi/run1/trigger_log.txt");
                cout<<"PROCESSING MC for Run 1 JpsiXi"<<endl;
                filein = TFile::Open("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiXi/run1/jpsixi.root");
                treein_gen = (TTree*)filein->Get("MCTuple/MCDecayTree");
                treein = (TTree*)filein->Get("Lb2JpsiLTree/MyTuple");
                fileout = new TFile("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiXi/run1/jpsixi_triggered.root","RECREATE");
            }
            if(run==2)
            {
                gROOT->ProcessLine(".> /data1/avenkate/JpsiLambda_RESTART/logs/mc/JpsiXi/run2/trigger_log.txt");
                cout<<"PROCESSING MC for Run 2 JpsiXi"<<endl;
                filein = TFile::Open("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiXi/run2/jpsixi.root");
                treein_gen = (TTree*)filein->Get("MCTuple/MCDecayTree");
                treein = (TTree*)filein->Get("Lb2JpsiLTree/MyTuple");
                fileout = new TFile("/data1/avenkate/JpsiLambda_RESTART/rootFiles/mcFiles/JpsiXi/run2/jpsixi_triggered.root","RECREATE");
            }
        }
        entries_gen = treein_gen->GetEntries();
        entries_init = treein->GetEntries();
        mytree = treein;
    }

    treeout = (TTree*)mytree->CloneTree(0);

    cout<<"Incoming entries = "<<entries_init<<endl;

    mytree->SetBranchAddress("Lb_Hlt1DiMuonHighMassDecision_TOS",&hlt1DiMuonHighMass);
    mytree->SetBranchAddress("Lb_Hlt1TrackMuonDecision_TOS",&hlt1TrackMuon);
    mytree->SetBranchAddress("Lb_Hlt1TrackAllL0Decision_TOS",&hlt1TrackAllL0);
    mytree->SetBranchAddress("Lb_Hlt2DiMuonDetachedJPsiDecision_TOS",&hlt2DiMuonDetached);

    triggerCut = (char*)"(Lb_Hlt1DiMuonHighMassDecision_TOS==1||Lb_Hlt1TrackMuonDecision_TOS==1||Lb_Hlt1TrackAllL0Decision_TOS==1)&&(Lb_Hlt2DiMuonDetachedJPsiDecision_TOS==1)";

    cout<<"I am making the following trigger cuts. Sit tight"<<endl;
    cout<<triggerCut<<endl;

    for(Int_t i=0; i<entries_init; i++)
    {
        if(i%10000 == 0)
        {
            cout<<i<<endl;
        }
        mytree->GetEntry(i);
        if(hlt2DiMuonDetached)
        {
            if(hlt1DiMuonHighMass||hlt1TrackMuon||hlt1TrackAllL0)
            {
                treeout->Fill();
            }
        }
    }

    entries_final = treeout->GetEntries();
    cout<<"Outgoing entries = "<<entries_final<<endl;

    if(isData==0)
    {
        eff_excl = (Float_t)entries_final*100/entries_init;
        eff_excl_err = sqrt( eff_excl*(100.0-eff_excl)/entries_init );
        cout<<"******************************************"<<endl;
        cout<<"Trigger cut made with exclusive efficiency = "<<eff_excl<<"% +/- " <<eff_excl_err<<" %"<<endl;
        cout<<"******************************************"<<endl;

        eff_incl = (Float_t)entries_final*100/entries_gen;
        eff_incl_err = sqrt( eff_incl*(100.0-eff_incl)/entries_gen);
        cout<<"******************************************"<<endl;
        cout<<"Trigger cut made with inclusive efficiency = "<<eff_incl<<"% +/- " <<eff_incl_err<<" %"<<endl;
        cout<<"******************************************"<<endl;
    }

    fileout->cd();
    treeout->Write();
    fileout->Close();

    gROOT->ProcessLine(".>");
    // gSystem->Exec("cat trigger_log.txt");
}
