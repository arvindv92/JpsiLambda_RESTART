/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

#include "Riostream.h" 

#include "V0hhFitter/RooHypatia.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "gsl/gsl_sf_bessel.h"

const Double_t sq2pi = sqrt(2*acos(-1.0));
const Double_t sq2pi_inv = 1./sq2pi;
const Double_t logsq2pi = log(sq2pi);
const Double_t log_de_2 = log(2.0);

Double_t low_x_BK(Double_t nu,Double_t x){
  return TMath::Gamma(nu)*pow(2,nu-1)*pow(x,-nu);
}


Double_t low_x_LnBK(Double_t nu, Double_t x){
  return log(TMath::Gamma(nu)) + (nu-1)*log_de_2 - nu * log(x);
}

Double_t BK(Double_t ni, Double_t x) {
  Double_t nu = abs(ni);
  if ( x < 1e-06 && nu > 0) return low_x_BK(nu,x);
  if ( x < 1e-04 && nu > 0 && nu < 55) return low_x_BK(nu,x);
  if ( x < 0.1 && nu >= 55) return low_x_BK(nu,x);

  return gsl_sf_bessel_Knu(nu, x);
}

Double_t LnBK(double ni, double x) {

  Double_t nu = abs(ni);
  if ( x < 1e-06 && nu > 0) return low_x_LnBK(nu,x);
  if ( x < 1e-04 && nu > 0 && nu < 55) return low_x_LnBK(nu,x);
  if ( x < 0.1 && nu >= 55) return low_x_LnBK(nu,x);

  return gsl_sf_bessel_lnKnu(nu, x);
}

Double_t LogEval(Double_t d, Double_t l, Double_t alpha, Double_t beta, Double_t delta) {

  Double_t gamma = alpha;
  Double_t dg = delta*gamma;
  Double_t thing = delta*delta + d*d;
  Double_t logno = l*log(gamma/delta) - logsq2pi -LnBK(l, dg);

  return exp(logno + beta*d +(0.5-l)*(log(alpha)-0.5*log(thing)) + LnBK(l-0.5,alpha*sqrt(thing)));
}

Double_t diff_eval(Double_t d, Double_t l, Double_t alpha, Double_t beta, Double_t delta){

  Double_t gamma = alpha;
  Double_t dg = delta*gamma;
  Double_t thing = delta*delta + d*d;
  Double_t sqthing = sqrt(thing);
  Double_t alphasq = alpha*sqthing;
  Double_t no = pow(gamma/delta,l)/BK(l,dg)*sq2pi_inv;
  Double_t ns1 = 0.5-l;
  
  return no*pow(alpha, ns1)*pow(thing, l/2 - 5.0/4.0)*(-d*alphasq*(BK(l - 3.0/2.0, alphasq) + BK(l + 0.5, alphasq)) + (2*(beta*thing + d*l) - d)*BK(ns1, alphasq))*exp(beta*d)/2;
}

//ClassImp(RooHypatia) 

RooHypatia::RooHypatia(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _l,
                        RooAbsReal& _zeta,
                        RooAbsReal& _fb,
                        RooAbsReal& _sigma,
                        RooAbsReal& _mu,
                        RooAbsReal& _a,
                        RooAbsReal& _n) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   l("l","l",this,_l),
   zeta("zeta","zeta",this,_zeta),
   fb("fb","fb",this,_fb),
   sigma("sigma","sigma",this,_sigma),
   mu("mu","mu",this,_mu),
   a("a","a",this,_a),
   n("n","n",this,_n)
{ 
} 


RooHypatia::RooHypatia(const RooHypatia& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   l("l",this,other.l),
   zeta("zeta",this,other.zeta),
   fb("fb",this,other.fb),
   sigma("sigma",this,other.sigma),
   mu("mu",this,other.mu),
   a("a",this,other.a),
   n("n",this,other.n)
{ 
} 


Double_t RooHypatia::evaluate() const 
{ 
   Double_t d = x-mu;
   Double_t cons0 = sqrt(zeta);
   Double_t alpha, beta, delta,  cons1, phi, A, B, k1, k2;
   Double_t asigma = a*sigma;
   Double_t out = 0.0;
   if (zeta!= 0.) {
     phi = BK(l+1,zeta)/BK(l,zeta); 
     cons1 = sigma/sqrt(phi);
     alpha  = cons0/cons1;
     beta = fb;
     delta = cons0*cons1;
     
     if (d > -asigma ) return LogEval(d,l,alpha,beta,delta);
     k1 = LogEval(-asigma,l,alpha,beta,delta);
     k2 = diff_eval(-asigma,l,alpha,beta,delta);
     B = -asigma + n*k1/k2;
     A = k1*pow(B+asigma,n);
     out =  A*pow(B-d,-n);
   }
   else if (l < 0) {
     beta = fb;
     cons1 = -2*l;
     delta = sigma;
     if (d > -asigma ) return  exp(beta*d)*pow(1 + d*d/(delta*delta),l-0.5);
     cons1 = exp(-beta*asigma);
     phi = 1 + a*a;
     k1 = cons1*pow(phi,l-0.5);
     k2 = beta*k1- cons1*(l-0.5)*pow(phi,l-1.5)*2*a/delta;
     B = -asigma + n*k1/k2;
     A = k1*pow(B+asigma,n);
     out = A*pow(B-d,-n);

   }
  
   return out;

 } 



