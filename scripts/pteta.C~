#include <TFile.h>
#include <TTree.h>
#include <TROOT.h>
#include <TSystem.h>
#include <TH2D.h>
#include <TH1D.h>
#include <TCanvas.h>
#include <TString.h>
#include <TMath.h>
#include <iostream>
using namespace std;
void pteta()
{
  gSystem->cd("/data1/avenkate/JpsiLambda_RESTART");

  // if(flag==1)
  gSystem->Exec("cp rootFiles/mcFiles/JpsiLambda/JpsiLambda/run1/jpsilambda_pidgen_ptetawt.root rootFiles/mcFiles/JpsiLambda/JpsiLambda/run1/jpsilambda_pidgen_ptetawt1.root");
  // if(flag==2)
  //   gSystem->Exec("cp ../jpsilambda_DD.root jpsilambda_DD_ptetawt.root");

  TFile *filein_data,*filein_mc,*filein_wts;
  TTree *treein_data,*treein_mc,*treein_wts;

  Int_t nentries_mc, nentries_data;
  Int_t nbins_lbeta = 20;
  Int_t nbins_lbpt = 50;
  Int_t etabin, ptbin;

  Float_t weights[20][50];
  Float_t binwidth_lbeta, binwidth_lbpt;
  Float_t ptetawt_pi;

  Double_t myeta,mypt;
  Int_t lbetalow, lbetahigh, lbptlow, lbpthigh;

  TH2D *etapt_data, *etapt_mc;

  lbetalow = 2;
  lbetahigh = 6;
  lbptlow = 0;
  lbpthigh = 2000;

  binwidth_lbeta = (Float_t)(lbetahigh-lbetalow)/nbins_lbeta;
  binwidth_lbpt = (Float_t)(lbpthigh-lbptlow)/nbins_lbpt;

  filein_data = TFile::Open("rootFiles/dataFiles/JpsiLambda/run1/jpsilambda_LL_withsw.root","READ");
  filein_mc = TFile::Open("rootFiles/mcFiles/JpsiLambda/JpsiLambda/run1/jpsilambda_pidgen_ptetawt.root","READ");

  treein_data = (TTree*)filein_data->Get("MyTuple");
  treein_mc = (TTree*)filein_mc->Get("MyTuple");

  nentries_mc = treein_mc->GetEntries();
  nentries_data = treein_data->GetEntries();

  treein_data->Draw(Form("Pi_PT:Pi_ETA>>etapt_data(%d,%d,%d,%d,%d,%d)",nbins_lbeta,lbetalow,lbetahigh,nbins_lbpt,lbptlow,lbpthigh),"SW","goff");
  treein_mc->Draw(Form("Pi_PT:Pi_ETA>>etapt_mc(%d,%d,%d,%d,%d,%d)",nbins_lbeta,lbetalow,lbetahigh,nbins_lbpt,lbptlow,lbpthigh),"ptetawt*(Lb_BKGCAT==0||Lb_BKGCAT==50)","goff");

  // treein_mc->Draw(Form("Lb_ETA>>lbeta_mc(%d,%d,%d)",nbins_lbeta,lbetalow,lbetahigh),"","goff");
  // treein_mc->Draw(Form("Lb_PT>>lbpt_mc(%d,%d,%d)",nbins_lbpt,lbptlow,lbpthigh),"","goff");

  etapt_data = (TH2D*)gDirectory->Get("etapt_data");
  etapt_mc = (TH2D*)gDirectory->Get("etapt_mc");

  cout<<"Data integral = "<<etapt_data->Integral()<<endl;
  cout<<"MC integral = "<<etapt_mc->Integral()<<endl;

  etapt_data->Scale(1.0/etapt_data->Integral());
  etapt_mc->Scale(1.0/etapt_mc->Integral());

  // TH1D *lbeta_mc = (TH1D*)gDirectory->Get("lbeta_mc");
  // TH1D *lbpt_mc = (TH1D*)gDirectory->Get("lbpt_mc");

  Float_t binc_data, binc_mc;
  cout<<"poop1"<<endl;
  for(Int_t i=0; i<nbins_lbeta; i++) {
    for(Int_t j=0; j<nbins_lbpt; j++) {
      binc_data=etapt_data->GetBinContent(i+1,j+1);
      binc_mc=etapt_mc->GetBinContent(i+1,j+1);
      if(binc_data!=0 && binc_mc!=0)
	cout<<"data = "<<binc_data<<" mc = "<<binc_mc<<endl;

      if(binc_mc!=0 && binc_data > 0)
	weights[i][j] = (Float_t)binc_data/binc_mc;

      else if(binc_mc!=0 && binc_data <= 0)
	weights[i][j] = 0;

      else if(binc_mc==0)
	weights[i][j] = 1;

      if(weights[i][j] > 10)
	cout<<"REDFLAG data = "<<binc_data<<" mc = "<<binc_mc<<" i = "<<i<<" j = "<<j<<endl;
    }
  }
  cout<<"poop2"<<endl;
  filein_wts = TFile::Open("rootFiles/mcFiles/JpsiLambda/JpsiLambda/run1/jpsilambda_pidgen_ptetawt1.root",
			   "UPDATE");

  treein_wts = (TTree*)filein_wts->Get("MyTuple");

  treein_wts->SetBranchAddress("pi_ETA",&myeta);
  treein_wts->SetBranchAddress("pi_PT",&mypt);

  TBranch *wtbranch = treein_wts->Branch("ptetawt_pi", &ptetawt_pi, "ptetawt_pi/F");
  cout<<"poop3"<<endl;
  for(Int_t i=0; i<nentries_mc; i++) {
    if(i%1000 == 0)
      cout<<i<<endl;

    treein_wts->GetEntry(i);

    etabin = TMath::CeilNint((Double_t)(myeta-lbetalow)/binwidth_lbeta);
    ptbin = TMath::CeilNint((Double_t)(mypt-lbptlow)/binwidth_lbpt);

    if(myeta > lbetahigh)
      etabin = nbins_lbeta;
    if(mypt > lbpthigh)
      ptbin = nbins_lbpt;
    if(myeta < lbetalow)
      etabin = 1;
    if(mypt < lbptlow)
      ptbin = 1;

    ptetawt_pi = weights[etabin-1][ptbin-1];

    wtbranch->Fill();
  }
  treein_wts->Write("",TObject::kOverwrite);
  cout<<"DONE"<<endl;
}
